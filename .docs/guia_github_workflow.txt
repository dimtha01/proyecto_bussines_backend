# GUÍA DE CONTROL DE VERSIONES CON GITHUB

## ESTADO ACTUAL DEL REPOSITORIO

### Rama Principal: `main`
- **Estado**: Multiple archivos modificados (17 archivos en el área de staging)
- **Archivos sin seguimiento**: Archivos de uploads (documentos, imágenes, PDFs)
- **Commits recientes**:
  - `f7fdc1d` - feat: integrar subida youtube y manejo archivos
  - `ffff992` - refactor: refactor rutas y base de datos
  - `f1e0cb7` - chore: actualizar lockfile y dependencias

## FLUJO DE TRABAJO RECOMENDADO (GITHUB FLOW)

### 1. Ramas Principales
```
main           ← Rama de producción (estable)
develop        ← Rama de desarrollo (integración)
feature/*      ← Ramas de nuevas funcionalidades
hotfix/*       ← Ramas de correcciones urgentes
release/*      ← Ramas de preparación de releases
```

### 2. Configuración Inicial
```bash
# Configurar usuario
git config --global user.name "Tu Nombre"
git config --global user.email "tu.email@example.com"

# Ver configuración actual
git config --list
```

### 3. Limpieza del Estado Actual
```bash
# Agregar archivos de uploads a .gitignore
echo "uploads/*" >> .gitignore
echo "!uploads/.gitkeep" >> .gitignore

# Crear .gitkeep para mantener la estructura
mkdir -p uploads/{document,image,pdf}
touch uploads/.gitkeep uploads/document/.gitkeep uploads/image/.gitkeep uploads/pdf/.gitkeep

# Hacer commit de los cambios actuales
git add .
git commit -m "feat: implementar estructura base del proyecto backend"
```

## ESTRATEGIA DE RAMAS

### Branch `main` (Producción)
- **Propósito**: Código estable y desplegado
- **Reglas**: 
  - Solo接受 merges desde `develop` o `hotfix/*`
  - Tags de versiones: `v1.0.0`, `v1.0.1`, etc.
  - Protección contra pushes directos

### Branch `develop` (Desarrollo)
```bash
# Crear rama develop
git checkout -b develop main
git push -u origin develop
```
- **Propósito**: Integración de funcionalidades
- **Reglas**: 
  - Todas las features se mergean aquí
  - Testing continuo
  - No merge directo desde `main`

### Feature Branches (Nuevas Funcionalidades)
```bash
# Desde develop
git checkout develop
git pull origin develop
git checkout -b feature/nueva-funcionalidad

# Ejemplos:
git checkout -b feature/autenticacion-jwt
git checkout -b feature/upload-archivos
git checkout -b feature/dashboard-estadisticas
```

### Hotfix Branches (Correcciones Urgentes)
```bash
# Desde main
git checkout main
git pull origin main
git checkout -b hotfix/corregir-bug-login

# Merge a main y develop
git checkout main
git merge --no-ff hotfix/corregir-bug-login
git tag v1.0.1

git checkout develop
git merge --no-ff hotfix/corregir-bug-login
```

## WORKFLOW DIARIO

### 1. Iniciar Nueva Tarea
```bash
# Actualizar develop
git checkout develop
git pull origin develop

# Crear feature branch
git checkout -b feature/nombre-funcionalidad
```

### 2. Desarrollo
```bash
# Hacer cambios
# Trabajar en los archivos...

# Commit con mensaje descriptivo
git add .
git commit -m "feat: agregar controlador de usuarios"

# Más commits si es necesario
git commit -m "fix: corregir validación de email"
git commit -m "docs: actualizar README de instalación"
```

### 3. Push y Pull Request
```bash
# Subir cambios
git push -u origin feature/nombre-funcionalidad

# Crear Pull Request en GitHub
# - De feature/nombre-funcionalidad hacia develop
# - Asignar revisores
# - Solicitar review
```

## CONVENCIONES DE COMMITS

### Formato: `<tipo>(<alcance>): <descripción>`

**Tipos:**
- `feat`: Nueva funcionalidad
- `fix`: Corrección de bug
- `docs`: Documentación
- `style`: Formato, sangría (sin cambios lógicos)
- `refactor`: Refactorización (ni feature ni fix)
- `test`: Agregar/actualizar tests
- `chore`: Tareas de mantenimiento
- `perf`: Mejoras de rendimiento
- `ci`: Integración continua
- `build`: Cambios en build system

**Ejemplos:**
```
feat(auth): implementar JWT tokens
fix(users): corregir validación de email
docs(api): agregar documentación de endpoints
refactor(db): optimizar consultas SQL
test(auth): agregar tests de login
```

## PULL REQUESTS (PRs)

### Template de PR:
```markdown
## Descripción
Breve descricripción de los cambios implementados.

## Tipo de Cambio
- [ ] Bug fix
- [ ] New feature
- [ ] Breaking change
- [ ] Documentation update

## Testing
- [ ] Tests unitarios pasando
- [ ] Tests de integración pasando
- [ ] Pruebas manuales realizadas

## Checklist
- [ ] Código sigue las convenciones del proyecto
- [ ] Self-review realizado
- [ ] Documentation actualizada
- [ ] Sin cambios en archivos sin seguimiento
```

### Proceso de Review:
1. **Code Review**: Revisión de calidad y mejores prácticas
2. **Testing**: Verificar que los tests pasen
3. **Approval**: Mínimo 1 approval requerido
4. **Merge**: Sin conflictos, con squash merge

## MANEJO DE CONFLICTOS

### Conflictos al hacer Pull:
```bash
git checkout develop
git pull origin develop  # Actualizar develop

git checkout feature/mi-feature
git rebase develop       # Rebase sobre develop

# Resolver conflictos manualmente
git add archivos-resueltos
git rebase --continue

# Si hay muchos conflictos:
git rebase --abort
# Volver a hacer merge tradicional
git merge develop
```

## RELEASES

### Preparación de Release:
```bash
# Crear rama de release
git checkout develop
git checkout -b release/v1.1.0

# Actualizar versiones, changelog, etc.
git commit -m "chore: preparar versión v1.1.0"

# Merge a main
git checkout main
git merge --no-ff release/v1.1.0
git tag v1.1.0

# Merge de vuelta a develop
git checkout develop
git merge --no-ff release/v1.1.0
```

## PROTECCIÓN DE RAMAS (GitHub Settings)

### Rama `main`:
- **Require pull request reviews before merging**: ✓
- **Require status checks to pass before merging**: ✓
- **Require branches to be up to date before merging**: ✓
- **Restrict pushes who can push**: Admins only

### Rama `develop`:
- **Require pull request reviews before merging**: ✓
- **Require status checks to pass before merging**: ✓

## AUTOMATIZACIÓN

### GitHub Actions (`.github/workflows/`):
```yaml
# ci.yml
name: CI Pipeline
on: [push, pull_request]
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
      - run: npm install
      - run: npm test
      - run: npm run lint
```

## BUENAS PRÁCTICAS

### 1. Commits Atómicos
- Un commit = una idea/concepto
- Mensajes descriptivos y claros
- No commits grandes con múltiples cambios no relacionados

### 2. Ramas Limpias
- Eliminar ramas de features después del merge
- Mantener develop siempre estable
- No hacer commits directos a main/develop

### 3. Documentación
- Actualizar README con nuevos features
- Documentar cambios breaking
- Mantener CHANGELOG.md

### 4. Testing
- Escribir tests para nuevas funcionalidades
- Mantener cobertura de código > 80%
- Tests deben pasar antes de cada merge

## EMERGENCIAS Y HOTFIXES

### Flujo Rápido:
```bash
# 1. Crear hotfix desde main
git checkout main
git checkout -b hotfix/critical-bug-fix

# 2. Fix rápido y commitear
git add .
git commit -m "hotfix: corregir bug crítico de seguridad"

# 3. Merge inmediato a main
git checkout main
git merge --no-ff hotfix/critical-bug-fix
git tag v1.0.1

# 4. Subir a producción
git push origin main --tags

# 5. Merge a develop para no perder el fix
git checkout develop
git merge --no-ff hotfix/critical-bug-fix
git push origin develop
```

## COMANDOS ÚTILES

### Ver Estado:
```bash
git status                    # Estado actual
git log --oneline --graph     # Historial visual
git branch -a                 # Todas las ramas
```

### Limpieza:
```bash
git clean -fd                 # Eliminar archivos no trackeados
git gc --aggressive           # Optimizar repositorio
```

### Revertir:
```bash
git revert HEAD              # Revertir último commit
git reset --hard HEAD~1      # Eliminar último commit (peligroso)
```

Esta guía te ayudará a mantener un control de versiones robusto y profesional para tu proyecto backend.